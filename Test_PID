#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define LENGTH 1000
#define TIME_STEP 0.1
float cam1_position_x, cam1_position_y = 0;
float cam2_position_x, cam2_position_y = 0;

struct PID
{
    float Kp;              // Proportional gain constant
    float Ki;              // Integral gain constant
    float Kd;              // Derivative gain constant
    float Kaw;             // Anti-windup gain constant
    float T_C;             // Time constant for derivative filtering
    float T;               // Time step
    float max_x, max_y;             // Max command in steps i guess, could be degrees depending on drivers
    float min_x, min_y;             // Min command
    float max_rate_x, max_rate_y;        // Max rate of change of the command
    float integral_x, integral_y;        // Integral term
    float err_prev_x, err_prev_y;        // Previous error
    float deriv_prev_x, deriv_prev_y;      // Previous derivative
    float command_sat_prev_x, command_sat_prev_y;// Previous saturated command
    float command_prev_x, command_prev_y;    // Previous command
};

struct FinalCommands {
    float finalcommand_x;
    float finalcommand_y;
};

struct Object
{
    float m;               // Mass of the object
    float k;               // Damping constant
    float F_max;           // Max force applied to the object
    float F_min;           // Min force applied to the object
    float T;               // Time step
    float v;               // Velocity of the object
    float z;               // Position of the object
};


struct FinalCommands PID_Step(struct PID *pid, float camcenter_x, float camcenter_y, float sunlocation_x, float sunlocation_y)
{
    /* This function implements a PID controller.
     *
     * Inputs:
     *   measurement: current measurement of the process variable
     *   setpoint: desired value of the process variable
     *   pid: a pointer to a PID struct containing the controller parameters
     *
     * Returns:
     *   command_sat: the control output of the PID controller (saturated based on max. min, max_rate)
     */

    float err_x, err_y;
    float command_x, command_y;
    float command_sat_x, command_sat_y;
    float deriv_filt_x, deriv_filt_y;

    /* Error calculation */
    err_x = sunlocation_x - camcenter_x;
    err_y = sunlocation_y - camcenter_y;

    /* Integral term calculation - including anti-windup */
    pid->integral_x += pid->Ki*err_x*pid->T + pid->Kaw*(pid->command_sat_prev_x - pid->command_prev_x)*pid->T;
    pid->integral_y += pid->Ki*err_y*pid->T + pid->Kaw*(pid->command_sat_prev_y - pid->command_prev_y)*pid->T;
    
    /* Derivative term calculation using filtered derivative method */
    deriv_filt_x = (err_x - pid->err_prev_x + pid->T_C*pid->deriv_prev_x)/(pid->T + pid->T_C);
    deriv_filt_y = (err_y - pid->err_prev_y + pid->T_C*pid->deriv_prev_y)/(pid->T + pid->T_C);
    pid->err_prev_x = err_x;
    pid->err_prev_y = err_y;
    pid->deriv_prev_x = deriv_filt_x;
    pid->deriv_prev_y = deriv_filt_y;

    /* Summing the 3 terms */
    command_x = pid->Kp*err_x + pid->integral_x + pid->Kd*deriv_filt_x;
    command_y = pid->Kp*err_y + pid->integral_y + pid->Kd*deriv_filt_y;

    /* Remember command at previous step */
    pid->command_prev_x = command_x;
    pid->command_prev_y = command_y;

    /* Saturate command */
    if (command_x > pid->max_x)
    {
        command_sat_x = pid->max_x;
    }
    else if (command_x < pid->min_x)
    {
        command_sat_x = pid->min_x;
    }
    else
    {
        command_sat_x = command_x;
    }

    if (command_y > pid->max_y)
    {
        command_sat_y = pid->max_y;
    }
    else if (command_y < pid->min_y)
    {
        command_sat_y = pid->min_y;
    }
    else
    {
        command_sat_y = command_y;
    }

    /* Apply rate limiter */
    if (command_sat_x > pid->command_sat_prev_x + pid->max_rate_x*pid->T)
    {
        command_sat_x = pid->command_sat_prev_x + pid->max_rate_x*pid->T;
    }
    else if (command_sat_x < pid->command_sat_prev_x - pid->max_rate_x*pid->T)
    {
        command_sat_x = pid->command_sat_prev_x - pid->max_rate_x*pid->T;
    }
    else
    {
        /* No action */
    }
    if (command_sat_y > pid->command_sat_prev_y + pid->max_rate_y*pid->T)
    {
        command_sat_y = pid->command_sat_prev_y + pid->max_rate_y*pid->T;
    }
    else if (command_sat_y < pid->command_sat_prev_y - pid->max_rate_y*pid->T)
    {
        command_sat_y = pid->command_sat_prev_y - pid->max_rate_y*pid->T;
    }
    else
    {
        /* No action */
    }

    /* Remember saturated command at previous step */
    pid->command_sat_prev_x = command_sat_x;
    pid->command_sat_prev_y = command_sat_y;

    //create struct with final commands
    struct FinalCommands control = {command_sat_x, command_sat_y};

    return control;
}

float Object_Step(struct Object *obj, float F){

    /* This function updates the position of an object in 1D based on the applied force F and
     * the object's mass, viscous damping coefficient k, max/min forces, and time step T.
     *
     * Inputs:
     *   F: the force applied to the object
     *   obj: a pointer to an object struct containing its properties (mass, damping, etc.)
     *
     * Returns:
     *   z: the position of the object in meters
     */

    /* Declare variables for the derivative dv/dt and the saturated force command */
    float dv_dt;
    float F_sat;

    /* Apply saturation to the input force */
    if (F > obj->F_max)
    {
        F_sat = obj->F_max;
    }
    else if (F < obj->F_min)
    {
        F_sat = obj->F_min;
    }
    else
    {
        F_sat = F;
    }

    /* Calculate the derivative dv/dt using the input force and the object's velocity and properties */
    dv_dt = (F_sat - obj->k*obj->v)/obj->m;

    /* Update the velocity and position of the object by integrating the derivative using the time step T */
    obj->v += dv_dt*obj->T;
    obj->z += obj->v*obj->T;

    /* Return the updated position of the object */
    return obj->z;
}

void get_positions() { // Retrieves positions from Guider Module Python and updates global position variables
    char command[256];
    snprintf(command, sizeof(command), "Guider_Test.py");


    FILE *fp = popen("Guider_Test.py", "r");
    if (fp == NULL) {
        perror("Failed to run Python script");
        exit(1);
    }

    char output[1024];
    if (fgets(output, sizeof(output), fp) != NULL) {
        int scanned = sscanf(output, "%f %f %f %f", 
                              &cam1_position_x, &cam1_position_y, 
                              &cam2_position_x, &cam2_position_y);
        if (scanned == 4) {
            // Success
        } else {
            printf("Failed to parse output.\n");
        }
    }

    fclose(fp);
}


int main()
{
    // Retrieve positions from Guider Module
    get_positions();

    // Current simulation time
    float t = 0;

    // Iteration counter
    int i = 0;

    // Setpoint and output of the first control loop
    struct FinalCommands a = {0,0};
    float stp1_x = 60;
    float stp1_y = 40;

    // Setpoint and output of the second control loop
    struct FinalCommands b = {0,0};
    float stp2_x = 20;
    float stp2_y = 20;

    // PID controller parameters for the first control loop
    struct PID pid1 = {1, 0.1, 5, 0.1, 1, TIME_STEP, 10, 10, -10, -10, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    //Kp, Ki, Kt, Kaw, T_C, T, max_x, max_y, min_x, min_y, max_rate_x, max_rate_y, integral_x, integral_y, err_prev_x, err_prev_y
    // deriv_prev_x, deriv_prev_y, command_sat_prev_x, command_sat_prev_y, command_prev_x, command_prev_y

    // PID controller parameters for the second control loop
    struct PID pid2 = {1, 0.1, 5, 0.1, 1, TIME_STEP, 10, 10, -10, -10, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    // Open a file for logging simulation data
    FILE *file = fopen("regular10.txt", "w");

    /* Implement iteration using a while loop */
    while(i < LENGTH)
    {
        /* Change setpoint at t = 60 seconds */
        if (t < 30)
        {
            stp1_x = 80;
            stp1_y = 80;
            stp2_x = 80;
            stp2_y = 100;
        }
        else if (t < 60 && t>=30)
        {
            stp1_x = 60;
            stp1_y = 40;
            stp2_x = 20;
            stp2_y = 20;
        }
        else if (t < 90 && t>=60)
        {
            stp1_x = 80;
            stp1_y = 80;
            stp2_x = 80;
            stp2_y = 100;
        }
        else
        {
            stp1_x = 60;
            stp1_y = 40;
            stp2_x = 20;
            stp2_y = 20;
        }
        
        // Execute the first control loop
        cam1_position_x += a.finalcommand_x;
        cam1_position_y += a.finalcommand_y;
        a = PID_Step(&pid1, cam1_position_x, cam1_position_y, stp1_x, stp1_y);

        // Execute the second control loop
        cam2_position_x += b.finalcommand_x;
        cam2_position_y += b.finalcommand_y;
        b = PID_Step(&pid2, cam2_position_x, cam2_position_y, stp2_x, stp2_y);

        // Log the current time and control loop values to the file
        fprintf(file, "%f %f %f %f %f %f %f %f %f\n", t, stp1_x, stp1_y, cam1_position_x, cam1_position_y, stp2_x, stp2_y, cam2_position_x, cam2_position_y );

        // Increment the time and iteration counter
        t = t + TIME_STEP;
        i = i + 1;
    }

    // Close the file and exit the program
    fclose(file);
    exit(0);
}
